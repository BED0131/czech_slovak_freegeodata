# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoDataDialog
                                 A QGIS plugin
 This plugin gathers cz/sk data sources.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-08-04
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Test
        email                : test
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
import importlib, inspect
from .data_sources.source import Source
from qgis.core import *
from qgis.gui import *

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Geo_Data_dialog_base.ui'))


class GeoDataDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(GeoDataDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.sources = []
        self.load_sources()
        self.print_sources_metadata()
        self.add_layer_from_source()

    def load_sources(self):
        # Used from https://stackoverflow.com/questions/3178285/list-classes-in-directory-python
        current_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)))
        current_module_name = os.path.splitext(os.path.basename(current_dir))[0]
        sources_dir = os.path.join(current_dir, 'data_sources')
        paths = [ name for name in os.listdir(sources_dir) if os.path.isdir(os.path.join(sources_dir, name)) ]
        for path in paths:
            if not path.startswith("__"):
                module = importlib.import_module(".data_sources." + path + ".source", package=current_module_name)
                for member in dir(module):
                    if member != 'Source':
                        handler_class = getattr(module, member)
                        if handler_class and inspect.isclass(handler_class) and issubclass(handler_class, Source):
                            self.sources.append(handler_class())

    def print_sources_metadata(self):
        for source in self.sources:
            print("META: " + source.get_metadata().name + " " + source.get_metadata().description)
            print("META: " + source.get_layers()[0].name + " " + source.get_layers()[0].description)

    def add_layer_from_source(self):
        vector = self.sources[0].get_vector(0, None, None)
        if vector is not None:
            QgsProject.instance().addMapLayer(vector)

        vector = self.sources[1].get_vector(0, None, None)
        if vector is not None:
            QgsProject.instance().addMapLayer(vector)
