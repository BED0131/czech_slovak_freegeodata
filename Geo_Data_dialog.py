# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoDataDialog
                                 A QGIS plugin
 This plugin gathers cz/sk data sources.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-08-04
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Test
        email                : test
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import configparser

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

current_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)))
sources_dir = os.path.join(current_dir, 'data_sources')

paths = []

for name in os.listdir(sources_dir):
    if os.path.isdir(os.path.join(sources_dir, name)):
        paths.append(name)

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Geo_Data_dialog_base.ui'))

class GeoDataDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(GeoDataDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushbutton_print.clicked.connect(self.data_sources)
    def data_sources(self):
        config = configparser.ConfigParser()
        for path in paths:
            config.read(os.path.join(sources_dir, path, 'metadata.ini'))
            print(config.sections())
        for key in config['gdal']:  
            print(key)
            print(config['gdal']['source_file'])